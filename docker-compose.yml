version: '3.8'

services:
  spring-boot-app:
    container_name: roamgram
    image: ${DOCKER_USERNAME}/roamgram:latest
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "6974:443"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_URL: ${POSTGRES_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      AWS_S3_ACCESS_KEY: ${AWS_S3_ACCESS_KEY}
      AWS_S3_SECRET_KEY: ${AWS_S3_SECRET_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_REGION: ${AWS_REGION}
      AWS_EC2_URI: ${AWS_EC2_URI}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      JWT_KEY: ${JWT_KEY}
      KEY_STORE_PASSWORD: ${KEY_STORE_PASSWORD}
      FRONTEND_URL: ${FRONTEND_URL}
      EMAILSENDER_EMAIL: ${EMAILSENDER_EMAIL}
      EMAILSENDER_PASSWORD: ${EMAILSENDER_PASSWORD}
    volumes:
      - h2-data:/app/h2-data
      - spring-boot-logs:/var/log/spring-boot
    networks:
      - my-network
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - my-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /var/lib/docker/containers/:/var/lib/docker/containers/:ro  # Mount Docker container logs

#  postgres-replica:
#    image: postgres:16
#    container_name: postgres-replica
#    environment:
#      POSTGRES_DB: ${POSTGRES_DB_NAME}
#      POSTGRES_USER: ${POSTGRES_USERNAME}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_REPLICATION_USER: replication_user
#      POSTGRES_REPLICATION_PASSWORD: replication_password
#      POSTGRES_PRIMARY_HOST: postgres-primary
#      POSTGRES_PRIMARY_PORT: 5432
#    labels:
#      co.elastic.logs/enabled: true
#      co.elastic.logs/module: postgresql
#      co.elastic.logs/fileset.stdout: log
#      co.elastic.logs/fileset.stderr: log
#    ports:
#      - "5433:5432"
#    networks:
#      - my-network
#    volumes:
#      - postgres_replica_data:/var/lib/postgresql/data
#      - /var/lib/docker/containers/:/var/lib/docker/containers/:ro  # Mount Docker container logs
#    depends_on:
#      - postgres-primary

  redis:
    image: "redis:alpine"
    container_name: redis
    networks:
      - my-network
    ports:
      - "6379:6379"
    expose:
      - "6379"
    volumes:
      - /var/lib/docker/containers/:/var/lib/docker/containers/:ro  # Mount Docker container logs


networks:
  my-network:
    driver: bridge

volumes:
  h2-data:
  postgres_data:
  spring-boot-logs:
