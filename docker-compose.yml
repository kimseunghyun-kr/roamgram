version: '3.8'

services:
  spring-boot-app:
    container_name: roamgram
    image: ${DOCKER_USERNAME}/roamgram:latest
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "443:443"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_URL: ${POSTGRES_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      AWS_S3_ACCESS_KEY: ${AWS_S3_ACCESS_KEY}
      AWS_S3_SECRET_KEY: ${AWS_S3_SECRET_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_REGION: ${AWS_REGION}
      AWS_EC2_URI: ${AWS_EC2_URI}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      JWT_KEY: ${JWT_KEY}
      KEY_STORE_PASSWORD: ${KEY_STORE_PASSWORD}
      FRONTEND_URL: ${FRONTEND_URL}
      EMAILSENDER_EMAIL: ${EMAILSENDER_EMAIL}
      EMAILSENDER_PASSWORD: ${EMAILSENDER_PASSWORD}
    volumes:
      - h2-data:/app/h2-data
      - spring-boot-logs:/var/log/spring-boot
    networks:
      - my-network
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    labels:
      co.elastic.logs/enabled: true
      co.elastic.logs/module: postgresql
      co.elastic.logs/fileset.stdout: access
      co.elastic.logs/fileset.stderr: error
    ports:
      - "5432:5432"
    networks:
      - my-network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: "redis:alpine"
    container_name: redis
    labels:
      co.elastic.logs/enabled: true
      co.elastic.logs/module: redis
      co.elastic.logs/fileset.stdout: access
      co.elastic.logs/fileset.stderr: error
    networks:
      - my-network
    ports:
      - "6379:6379"
    expose:
      - "6379"

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.14.2
    container_name: filebeat
#       Need to override user so we can access the log files, and docker.sock
    command: ["--strict.perms=false"]
    user: root
    volumes:
      - ./observability/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro  # Mount local filebeat.yml
      - /var/run/docker.sock:/var/run/docker.sock
      # This is needed for filebeat to load container log path as specified in filebeat.yml
      - /var/lib/docker/containers/:/var/lib/docker/containers/:ro
      # This is needed for filebeat to load spring boot app log path as specified in filebeat.yml
      - /var/lib/docker/volumes/travelplanner_spring-boot-logs/_data:/usr/share/filebeat/spring-boot-app/:ro
      # This is needed for filebeat to load logs for system and auth modules
      - /var/log/:/var/log/:ro
      # This is needed for filebeat to load logs for auditd module. you might have to install audit system
      # on ubuntu first (sudo apt-get install -y auditd audispd-plugins)
      - /var/log/audit/:/var/log/audit/:ro
    depends_on:
      - spring-boot-app
      - redis
      - postgres
    networks:
      - my-network

#  metricbeat:
#    image: docker.elastic.co/beats/metricbeat:8.14.2
#    container_name: metricbeat
#    user: root
#    volumes:
#      - ./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
#      - /proc:/hostfs/proc:ro
#      - /:/hostfs:ro
#      - /var/log/metricbeat:/var/log/metricbeat
#    depends_on:
#      - spring-boot-app
#    networks:
#      - my-network


networks:
  my-network:
    driver: bridge

volumes:
  h2-data:
  postgres_data:
  spring-boot-logs:
